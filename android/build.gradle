buildscript {
  ext.getExtOrDefault = {name ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['LegacyDragDrop_' + name]
  }

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.7.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
  }
}


apply plugin: "com.android.library"
apply plugin: "kotlin-android"

apply plugin: "com.facebook.react"

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["LegacyDragDrop_" + name]).toInteger()
}

android {
  namespace "com.legacydragdrop"

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  // Define uma variável que pega a versão do Java do projeto principal (ex: octavia-mobile)
  // Se não encontrar, usa a versão 11 como um padrão seguro.
  def javaVersion = rootProject.ext.has("sourceCompatibility") ? rootProject.ext.get("sourceCompatibility") : JavaVersion.VERSION_11

  compileOptions {
    // Usa a variável dinâmica
    sourceCompatibility javaVersion
    targetCompatibility javaVersion
  }

  kotlinOptions {
    // Usa a variável dinâmica, convertendo para o formato de string que o Kotlin espera (ex: "11")
    jvmTarget = javaVersion.toString()
  }

  
  sourceSets {
    main {
      java.srcDirs += [
        "generated/java",
        "generated/jni"
      ]
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  implementation "com.facebook.react:react-android"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

react {
  jsRootDir = file("../src/")
  libraryName = "LegacyDragDrop"
  codegenJavaPackageName = "com.legacydragdrop"
}


afterEvaluate {
    if (tasks.findByName('generateCodegenArtifactsFromSchema')) {
        tasks.named('generateCodegenArtifactsFromSchema').configure {
            enabled = false
        }
    }
    if (tasks.findByName('generateCodegenSchemaFromJavaScript')) {
        tasks.named('generateCodegenSchemaFromJavaScript').configure {
            enabled = false
        }
    }
}